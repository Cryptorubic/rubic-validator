"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
from datetime import timedelta
from os import environ
from pathlib import Path

from django.utils import timezone

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = environ.get('BACKEND_SECRET_KEY')
SECRET_KEY_ID = environ.get('BACKEND_SECRET_KEY_ID')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(environ.get('BACKEND_DEBUG_MODE'))

BACKEND_SETTINGS_TYPE = environ.get('BACKEND_SETTINGS_TYPE')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # 3RD-PARTY EXTENTIONS
    'django_celery_beat',
    'django_extensions',
    'rangefilter',
    ###

    # APPS
    'contracts',
    'networks',
    'notifications',
    'users',
    'validators',
    ###
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': environ.get('DATABASE_NAME'),
        'USER': environ.get('DATABASE_ORIGIN_USER'),
        'PASSWORD': environ.get('DATABASE_ORIGIN_PASS'),
        'HOST': environ.get('DATABASE_HOST'),
        'PORT': environ.get('DATABASE_PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = '/code/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'users.User'

# LOGGING
LOGGING_CURRENT_DATE = timezone.now()

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            'format': '%(asctime)s %(name)-12s %(levelname)-8s %(message)s'
        },
        'file': {
            'format': '%(asctime)s %(name)-12s %(levelname)-8s %(message)s'
        }
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'console'
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'formatter': 'file',
            'filename': '{mode}_{year}_{month}.log'.format(
                mode=environ.get('BACKEND_SETTINGS_MODE'),
                year=LOGGING_CURRENT_DATE.year,
                month=LOGGING_CURRENT_DATE.month
            )
        }
    },
    'loggers': {
        '': {
            'level': 'INFO',
            'handlers': ('console', 'file')
        },
        'django.request': {
            'level': 'DEBUG',
            'handlers': ('console', 'file'),
            'propagate': False
        },
        'django.server': {
            'level': 'DEBUG',
            'handlers': ('console', 'file'),
            'propagate': False
        },
        'backend.contracts': {
            'level': 'DEBUG',
            'handlers': ('console', 'file'),
            'propagate': False
        },
        'backend.networks': {
            'level': 'DEBUG',
            'handlers': ('console', 'file'),
            'propagate': False
        },
        'backend.users': {
            'level': 'DEBUG',
            'handlers': ('console', 'file'),
            'propagate': False
        },
    }
}

# BROKER
BROKER_SERVICE_NAME = environ.get('BROKER_SERVICE_NAME')
BROKER_HOST = environ.get('BROKER_HOST')
BROKER_PORT = environ.get('BROKER_PORT')
BROKER_URL = f'redis://{BROKER_HOST}:{BROKER_PORT}/0'
BROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 3600, }

# CELERY
CELERY_DATA_FORMAT = 'json'
CELERY_BROKER_URL = f'redis://{BROKER_SERVICE_NAME}:{BROKER_PORT}/0'
# CELERY_RESULT_BACKEND = f'redis://{BROKER_SERVICE_NAME}:{BROKER_PORT}/0'
CELERY_ACCEPT_CONTENT = [f'application/{CELERY_DATA_FORMAT}', ]
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_SERIALIZER = CELERY_DATA_FORMAT
CELERY_RESULT_SERIALIZER = CELERY_DATA_FORMAT

CELERY_BEAT_SCHEDULE = {
    # SEND SIGNATURE TO RELAYER
    'update_swaps_task': {
        'task': 'validators.tasks.update_swaps_task',
        'schedule': timedelta(seconds=60),
    },
}

CELERYD_HIJACK_ROOT_LOGGER = False
CELERYD_LOG_COLOR = True

CELERYD_PREFETCH_MULTIPLIER = 1
CELERYD_CONCURRENCY = int(environ.get('CELERY_CONCURRENCY', 1))

# FOR VALIDATOR WORK
VALIDATOR_ADDRESS = str(environ.get('VALIDATOR_ADDRESS'))
VALIDATOR_NAME = str(environ.get('VALIDATOR_NAME'))
VALIDATOR_PRIVATE_KEY = str(environ.get('VALIDATOR_PRIVATE_KEY'))
PRIVATE_PASSWORD_FOR_SIGNATURE_API = str(
    environ.get('PRIVATE_PASSWORD_FOR_SIGNATURE_API')
)

# OTHER
BLOCK_RANGE = int(environ.get('BLOCK_RANGE'))
MIN_CONFIRMATION_BLOCK_COUNT = int(environ.get('MIN_CONFIRMATION_BLOCK_COUNT'))
DEFAULT_SCANNER_TIMEOUT = int(environ.get('DEFAULT_SCANNER_TIMEOUT'))
DEFAULT_SCANNER_TIMEOUT_FAST = int(environ.get('DEFAULT_SCANNER_TIMEOUT_FAST'))

RELAYER_URL = str(environ.get('RELAYER_URL'))

CONTRACT_BLOCKCHAIN_IDS_TOKEN_WITH_SIX_DECIMALS = (
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
)

# TELEGRAM BOT
TELEGRAM_BACKEND_URL = environ.get('TELEGRAM_BACKEND_URL')
